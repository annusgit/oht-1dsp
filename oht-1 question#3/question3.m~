

% throughout this exercise, we shall assume that 
% w ==> small omega (discrete frequency)
% W ==> capital omega (Analog frequency)

%%
% ============================== question #1 ==============================
% we are given the following signal
% x(t) = { +0.5, 0.0 <= t <= 0.5
%        { -0.5, 0.5 <  t <= 1.0
% let's define and plot it

Fs = 50; rows = 2; cols = 2;
t = linspace(0,1,Fs);
x = [];
x(0<=t & t<=0.5) = 0.5;
x(0.5<t & t<=1) = -0.5; figure; subplot(rows,cols,1);
plot(t,x); title('Original Signal'); 
xlabel('t (seconds)'); ylabel('x(t)'); hold on;
[W, f] = plot_spectrum(x, Fs); subplot(rows,cols,2); hold on;
plot(W, real(f)); title('Magnitude Spectrum of original signal'); 
xlabel('Frequency (Hz)'); ylabel('magnitude of X(F)'); grid on;
% disp(length(t));


%%
% ============================== question #2 ==============================
% design an analog 3rd order low pass filter before continuous to 
% discrete domain conversion. Use a butterworth filter for doing so...
cut_off_freq = 20; % this is in Hz, so it's analog!

% design a 3rd order butterworth filter with cutoff at cut_off_freq
% now fs is 1000, so fs/2 = 500 and we want to cut at 20 which should be
% 20/500
[b, a] = butter(3, cut_off_freq/(Fs/2)); % the second arg=1 corresponds to fs/2
% apply the butterworth filter
x_filtered = filter(b, a, x);
% plot to see if it worked 
subplot(rows,cols,3); plot(t,x_filtered); 
title('Filtered Signal'); 
xlabel('t (seconds)'); ylabel('x(t) filtered'); hold on;
[W_x, f] = plot_spectrum(x_filtered, Fs); subplot(rows,cols,4); hold on;
plot(W_x, real(f)); title('Magnitude Spectrum of filtered signal'); 
xlabel('Frequency (Hz)'); ylabel('magnitude of X(F) filtered'); grid on;
% disp(length(t));

% also get the frequency response of the filter
% figure;
% this will return a discrete domain frequency vector 'w' so we convert it
[h, w] = freqz(b, a, 500); % we will plot it at 500 points 
figure; % subplot(rows, cols, 5);
% because we know that 2*pi*f/Fs = w ==> f = Fs*w/(2*pi)
plot(w*Fs/(2*pi), abs(h)); grid on; 
title('frequency response of butterworth filter'); 
xlabel('Frequency (Hz)'); ylabel('H(F) of the filter')


%%
% ============================== question #3 ==============================
% Now we will do continuous to discrete domain conversion
% using a zero-order hold filter followed by quantization

% apply a zero order hold filter
Ts = 0.01; % this is our sampling time period
zero_order_held = zoh(ones(1,length(x_filtered))*Ts, x_filtered, t);
figure;
plot(t, zero_order_held); title('zero order hold'); 
xlabel('t (seconds)'); ylabel('x(t) zero order held');

% generate a periodic rectangular pulse train for performing a zero order
% hold and then we multiply our filtered signal with this thing in time
% domain for getting a zero-order hold action

% old_vals = [1e6, 50e3];
% samp_freq = 2*Fs; repitition_freq = 1e3;
% 
% t = 0 : 1/samp_freq : 1;     % this is the frequency of sampling the given signal, in the middle
% d = 0 : 1/repitition_freq : 1;  % this is our repition frequency
% y = pulstran(t,d,@rectpuls,1e-5);
% plot(t,y);  % sin(2*pi*10e4*t/Fs)
% axis([0 0.001 0 1.5])
% 
% w=50;               % positive signal width in percentage
% F=1;                % signal frequency
% T=1/F;              % signal period 
% w0=2*pi*F;          % signal pulse
% ts=T/50;            % sample time
% np=2;               % number of period = np*2
% t=-np*T:ts:np*T;   % time vector allowing np*2 period
% y=square(w0*(t-T*w/200),w);
% close;plot(t,y,'r');

% signal_frequency = 1000; % how many sample you need? let's say 10
% nyq_frequency = 2*Fs;
% nyq_t = linspace(0, 1, nyq_frequency);
% square_train = square(2*pi*signal_frequency*nyq_t, 50); % here we have 50% duty cycle
% plot(t, square_train);


t = 0: 0.001: 10;      % Time vector 
w = 1;                      % pulse width
d = w/2: w*2: 10;     % delay vector
y2 = pulstran(t, d, 'rectpuls', w); 
plot(t, y2); 
set(gca, 'Ylim', [-0.1 1.1]); 













